#
# Host environment variables
#
# Docker variables.
#
#   DOCKER_OS_IMAGE: Docker base image to customize.
#   DOCKER_OS_TAG: Docker base tag to customize.
#
#   HOST_CONTAINER_FLAVOUR: Flavour to build and run container.
#   HOST_CONTAINER_USER_CONTEXT: Set to 1 if user context is shared.
#   HOST_USER_HOME: Set to host user home.
#
# Devices mapped to support networking and docker access.
#
#   DEVICE_TUN: Networking tun device, default: '/dev/net/tun' (optional).
#   DOCKER_SOCK: Docker socket, default: '/var/run/docker.sock' (optional).
#
# Workspaces has it's own directories based on:
#
#   HOST_STORAGE_DIR: The storage dir to enable data share (optional),
#   HOST_WORKSPACE_BASE_DIR: The workspace base dir to create workspaces.
#
# User details to create account inside container.
#
#   USER_NAME
#   USER_GROUP
#   USER_UID
#   USER_GID
#   USER_GROUPS
#   USER_SHELL
#

# Docker OS image, tag and flavour
DOCKER_OS_IMAGE="${DOCKER_OS_IMAGE:-debian}"
DOCKER_OS_TAG="${DOCKER_OS_TAG:-stable}"
HOST_CONTAINER_FLAVOUR="${HOST_CONTAINER_FLAVOUR:-__HOST_CONTAINER_FLAVOUR__}"
HOST_CONTAINER_USER_CONTEXT="${HOST_CONTAINER_USER_CONTEXT:-1}"
HOST_USER_HOME="${HOST_USER_HOME:-__HOST_USER_HOME__}"

env_host_load_flavour() {
	local type="$1"

	if [ "$HOST_CONTAINER_FLAVOUR" ]; then
		include_flavour="flavours/$HOST_CONTAINER_FLAVOUR/$type.sh"
		if [ ! -f "$include_flavour" ]; then
			echo "ERROR: Flavour ($HOST_CONTAINER_FLAVOUR) not supported"
			echo "ERROR: Loading flavour file ($include_flavour)"
			exit 1
		fi
		source $include_flavour
	fi
}

# Host storage and workspace base dirs
HOST_STORAGE_DIR="${HOST_STORAGE_DIR:-__HOST_STORAGE_DIR__}"
HOST_WORKSPACE_BASE_DIR="${HOST_WORKSPACE_BASE_DIR:-__HOST_WORKSPACE_BASE_DIR__}"

# Host docker group id
HOST_DOCKER_GID="__HOST_DOCKER_GID__"

## User setup

USER_NAME="devel"
USER_GROUP="$USER_NAME"
USER_UID="__USER_UID__"
USER_GID="__USER_GID__"
USER_GROUPS="docker,sudo,users"
USER_SHELL="/bin/bash"

# Flavour support

env_host_load_flavour host
